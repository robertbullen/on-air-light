import cors from 'cors';
import express from 'express';
import asyncHandler from 'express-async-handler';
import * as yup from 'yup';
import { createEventsRouter } from './routers/events';
import { EventToUserStateConverter } from './services/event-converters/event-converters';
import { EventsService } from './services/events/events-service';
import { OnAirLightService } from './services/on-air-lights/on-air-light-service';
import { Service } from './services/service';
import { UserStatesService } from './services/user-states/user-states-service';

export async function createApp<TEventKey>({
	eventsService,
	eventToUserStateConverters,
	healthCheckServices,
	onAirLightService,
	userStatesService,
}: {
	eventsService: EventsService<TEventKey>;
	eventToUserStateConverters: readonly EventToUserStateConverter<TEventKey>[];
	healthCheckServices: readonly Service[];
	onAirLightService: OnAirLightService;
	userStatesService: UserStatesService;
}): Promise<express.Application> {
	const app = express();
	app.use(cors());
	app.use(express.json());

	// Register a global error handler that understands the errors generated by express-yup and
	// converts them to 400-level status codes.
	const errorHandler: express.ErrorRequestHandler = (error, _req, res, next) => {
		if (error) {
			if (error instanceof Error) {
				console.error(error.toString());
			} else {
				console.error(error);
			}

			if (error instanceof yup.ValidationError) {
				res.status(400).json({ message: error.message });
				return;
			}
		}

		next(error);
	};
	app.use(errorHandler);

	app.get(
		'/health',
		asyncHandler(async (_req, res, _next) => {
			const result = await Service.checkHealthOfAll(healthCheckServices);
			res.status(200).json(result);
		}),
	);

	app.use(
		createEventsRouter({
			eventToUserStateConverters,
			eventsService,
			onAirLightService,
			userStatesService,
		}),
	);

	return app;
}
